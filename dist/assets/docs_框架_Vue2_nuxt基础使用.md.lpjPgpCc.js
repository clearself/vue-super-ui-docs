import{aF as s,e as i,f as a,V as n}from"./chunks/framework.54wzUQT-.js";const o=JSON.parse('{"title":"nuxt 基础使用","description":"","frontmatter":{},"headers":[],"relativePath":"docs/框架/Vue2/nuxt基础使用.md","filePath":"docs/框架/Vue2/nuxt基础使用.md","lastUpdated":1716277301000}'),p={name:"docs/框架/Vue2/nuxt基础使用.md"},t=n(`<h1 id="nuxt-基础使用" tabindex="-1">nuxt 基础使用 <a class="header-anchor" href="#nuxt-基础使用" aria-label="Permalink to &quot;nuxt 基础使用&quot;">​</a></h1><p>安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-nuxt-app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">项目</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p>└─my-nuxt-demo</p><p>├─.nuxt // Nuxt 自动生成，临时的用于编辑的文件，build</p><p>├─assets // 用于组织未编译的静态资源如 LESS、SASS 或 JavaScript,对于不需要通过 Webpack 处理的静态资源文件，可以放置在 static 目录中</p><p>├─components // 用于自己编写的 Vue 组件，比如日历组件、分页组件</p><p>├─layouts // 布局目录，用于组织应用的布局组件，不可更改 ⭐</p><p>├─middleware // 用于存放中间件</p><p>├─node_modules</p><p>├─pages // 用于组织应用的路由及视图,Nuxt.js 根据该目录结构自动生成对应的路由配置，文件名不可更改 ⭐</p><p>├─plugins // 用于组织那些需要在 根 vue.js 应用 实例化之前需要运行的 Javascript 插件。</p><p>├─static // 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。 服务器启动的时候，该目录下的文件会映射至应用的根路径 / 下。文件夹名不可更改。⭐</p><p>└─store // 用于组织应用的 Vuex 状态管理。文件夹名不可更改。⭐</p><p>├─.editorconfig // 开发工具格式配置</p><p>├─.eslintrc.js // ESLint 的配置文件，用于检查代码格式</p><p>├─.gitignore // 配置 git 忽略文件</p><p>├─nuxt.config.js // 用于组织 Nuxt.js 应用的个性化配置，以便覆盖默认配置。文件名不可更改。⭐</p><p>├─package-lock.json // npm 自动生成，用于帮助 package 的统一设置的，yarn 也有相同的操作</p><p>├─package.json // npm 包管理配置文件</p><p>├─README.md</p><h2 id="页面及路由" tabindex="-1">页面及路由 <a class="header-anchor" href="#页面及路由" aria-label="Permalink to &quot;页面及路由&quot;">​</a></h2><p>└─pages</p><p>├─index.vue</p><p>└─user</p><p>├─index.vue</p><p>├─one.vue</p><p>nuxt 会自动生成路由, 访问/是 pages 下的 index.vue 访问/user 是 user 下的 index.vue 访问/user/one 也是</p><p>页面跳转</p><p>不要写 a 链接,因为是重新获取一个新的页面,而不是 SPA</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nuxt-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">声明导航 this.$router.push(&#39;/users&#39;) 编程导航</span></span></code></pre></div><p>动态路由</p><p>需要创建对应的以下划线作为前缀的 Vue 文件 或 目录。</p><p>验证动态路由参数, 返回 true 表示通过，false 会跳转到 404 页面</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    cosole.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="异步请求" tabindex="-1">异步请求 <a class="header-anchor" href="#异步请求" aria-label="Permalink to &quot;异步请求&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`https://api.nuxtjs.dev/posts/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { post }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>asyncData 在服务端发送请求不存在跨域</p><p>因为 created 会触发两次，mounted 只会在浏览器触发一次</p><h2 id="自定义路由" tabindex="-1">自定义路由 <a class="header-anchor" href="#自定义路由" aria-label="Permalink to &quot;自定义路由&quot;">​</a></h2><p>nuxt.config.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  extendRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(routes) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    routes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​      path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​      redirect: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/center&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,43),e=[t];function h(l,k,d,r,E,g){return i(),a("div",null,e)}const u=s(p,[["render",h]]);export{o as __pageData,u as default};
