import{aF as s,e as i,f as a,V as n}from"./chunks/framework.54wzUQT-.js";const o=JSON.parse('{"title":"Vue 属性更新检测","description":"","frontmatter":{},"headers":[],"relativePath":"docs/框架/Vue2/更新检测.md","filePath":"docs/框架/Vue2/更新检测.md","lastUpdated":1716277301000}'),h={name:"docs/框架/Vue2/更新检测.md"},t=n(`<h1 id="vue-属性更新检测" tabindex="-1">Vue 属性更新检测 <a class="header-anchor" href="#vue-属性更新检测" aria-label="Permalink to &quot;Vue 属性更新检测&quot;">​</a></h1><h2 id="数组更新检测" tabindex="-1">数组更新检测 <a class="header-anchor" href="#数组更新检测" aria-label="Permalink to &quot;数组更新检测&quot;">​</a></h2><p>push、pop、shift、unshift、splice、sort、reverse</p><p>filter()、concat()、slice() 返回新数组替换旧数据</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(数组,下标,新值) vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(数组,下标,新值) vm.数组.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(下标,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,新值)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.数组.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(新长度)</span></span></code></pre></div><h2 id="对象添加属性" tabindex="-1">对象添加属性 <a class="header-anchor" href="#对象添加属性" aria-label="Permalink to &quot;对象添加属性&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(改变的对象,添加的键,值)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">实例.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(改变的对象,添加的键,值)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多个属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">改变的对象 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({},改变的对象,{对象1},{对象2}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后面的对象合并到第一个参数,并返回第一个参数的引用,再复制给改变的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一个参数需要是新对象,如果是要改变的对象引用不会变</span></span></code></pre></div><h2 id="对象删除属性" tabindex="-1">对象删除属性 <a class="header-anchor" href="#对象删除属性" aria-label="Permalink to &quot;对象删除属性&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(对象,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">实例.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(对象,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;属性名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="this-nexttick" tabindex="-1">this.$nextTick <a class="header-anchor" href="#this-nexttick" aria-label="Permalink to &quot;this.$nextTick&quot;">​</a></h2><p>数据被修改且渲染之后再调用next回调,并返回promise对象</p><p>this.$nextTick这个方法作用是当数据被修改后使用这个方法会回调获取更新后的dom再渲染出来</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">methods：{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  testClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;改变了的值&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dom元素更新后执行，因此这里能正确打印更改之后的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(that.$refs.tar.innerText) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改变了的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13),l=[t];function e(p,k,E,d,r,g){return i(),a("div",null,l)}const y=s(h,[["render",e]]);export{o as __pageData,y as default};
