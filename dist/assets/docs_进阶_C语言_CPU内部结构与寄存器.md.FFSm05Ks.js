import{aF as s,e as i,f as a,V as n}from"./chunks/framework.54wzUQT-.js";const t="/vue-super-ui/assets/1.NN8zGVaL.png",l="/vue-super-ui/assets/2.bf-GklAt.png",h="/vue-super-ui/assets/3.lZqeaNIU.png",F=JSON.parse('{"title":"CPU 内部结构与寄存器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/进阶/C语言/CPU内部结构与寄存器.md","filePath":"docs/进阶/C语言/CPU内部结构与寄存器.md","lastUpdated":1716277301000}'),p={name:"docs/进阶/C语言/CPU内部结构与寄存器.md"},k=n(`<h1 id="cpu-内部结构与寄存器" tabindex="-1">CPU 内部结构与寄存器 <a class="header-anchor" href="#cpu-内部结构与寄存器" aria-label="Permalink to &quot;CPU 内部结构与寄存器&quot;">​</a></h1><ul><li>寄存器是 CPU 内部最基本的存储单元</li><li>CPU 对外是通过总线(地址、控制、数据)来和外部设备交互的，总线的宽度是 8 位，同时 CPU 的寄存器也是 8 位，那么这个 CPU 就叫 8 位 CPU</li><li>如果总线是 32 位，寄存器也是 32 位的，那么这个 CPU 就是 32 位 CPU</li><li>有一种 CPU 内部的寄存器是 32 位的，但总线是 16 位，准 32 为 CPU</li><li>所有的 64 位 CPU 兼容 32 位的指令，32 位要兼容 16 位的指令，所以在 64 位的 CPU 上是可以识别 32 位的指令</li><li>在 64 位的 CPU 构架上运行了 64 位的软件操作系统，那么这个系统是 64 位</li><li>在 64 位的 CPU 构架上，运行了 32 位的软件操作系统，那么这个系统就是 32 位</li><li>64 位的软件不能运行在 32 位的 CPU 之上</li></ul><h2 id="寄存器名字" tabindex="-1">寄存器名字 <a class="header-anchor" href="#寄存器名字" aria-label="Permalink to &quot;寄存器名字&quot;">​</a></h2><table><thead><tr><th>8 位</th><th>16 位</th><th>32 位</th><th>64 位</th></tr></thead><tbody><tr><td>A</td><td>AX</td><td>EAX</td><td>RAX</td></tr><tr><td>B</td><td>BX</td><td>EBX</td><td>RBX</td></tr><tr><td>C</td><td>CX</td><td>ECX</td><td>RCX</td></tr><tr><td>D</td><td>DX</td><td>EDX</td><td>RDX</td></tr></tbody></table><h2 id="寄存器、缓存、内存三者关系" tabindex="-1">寄存器、缓存、内存三者关系 <a class="header-anchor" href="#寄存器、缓存、内存三者关系" aria-label="Permalink to &quot;寄存器、缓存、内存三者关系&quot;">​</a></h2><p>按与 CPU 远近来分，离得最近的是寄存器，然后缓存(CPU 缓存)，最后内存。</p><p>CPU 计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;---&gt;寄存器&lt;---&gt;内存，这就是它们之间的信息交换。</p><p>那为什么有缓存呢？因为如果经常操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。</p><p>因为从缓存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</p><p>由此可以看出，从远近来看：CPU〈---〉寄存器〈---&gt; 缓存 &lt;---&gt; 内存。</p><h2 id="c-语言嵌套汇编代码" tabindex="-1">C 语言嵌套汇编代码 <a class="header-anchor" href="#c-语言嵌套汇编代码" aria-label="Permalink to &quot;C 语言嵌套汇编代码&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdio.h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//定义整型变量a, b, c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__asm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov a, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//3的值放在a对应内存的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//4的值放在b对应内存的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov eax, a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//把a内存的值放在eax寄存器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		add eax, b</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//eax和b相加，结果放在eax</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov c, eax</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//eax的值放在c中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  c);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//把c的值输出</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//成功完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="反汇编" tabindex="-1">反汇编 <a class="header-anchor" href="#反汇编" aria-label="Permalink to &quot;反汇编&quot;">​</a></h2><ul><li>正常编写的c代码</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//定义整型变量a, b, c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  c);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//把c的值输出</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//成功完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>设置断点F9</li></ul><p><img src="`+t+'" alt="设置断点F9" loading="lazy"></p><ul><li>选择反汇编按钮</li></ul><p><img src="'+l+'" alt="设置断点F9" loading="lazy"></p><ul><li>根据汇编代码分析程序</li></ul><p><img src="'+h+'" alt="设置断点F9" loading="lazy"></p>',21),e=[k];function d(r,E,c,g,y,o){return i(),a("div",null,e)}const u=s(p,[["render",d]]);export{F as __pageData,u as default};
