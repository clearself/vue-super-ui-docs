import{aF as i,e as s,f as a,V as t}from"./chunks/framework.54wzUQT-.js";const E=JSON.parse('{"title":"AutoLisp 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"docs/文章/AutoLisp/AutoLisp介绍.md","filePath":"docs/文章/AutoLisp/AutoLisp介绍.md","lastUpdated":1716277301000}'),l={name:"docs/文章/AutoLisp/AutoLisp介绍.md"},e=t(`<h1 id="autolisp-介绍" tabindex="-1">AutoLisp 介绍 <a class="header-anchor" href="#autolisp-介绍" aria-label="Permalink to &quot;AutoLisp 介绍&quot;">​</a></h1><p>AutoLISP 是由 Autodesk 公司开发的一种 LISP 程序语言，LISP 是 List Processor 的缩写，是一种嵌入在 AutoCAD 内部的编程语言。通过 autolisp 编程，可以用代码运行 CAD 中的命令，其缺点是继承了 LISP 语言的编程规则而导致繁多的括号（括号语言）</p><p>每段代码块都是以()来包裹，例如:</p><div class="language-lisp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lisp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Hello, Welcome to AutoLisp!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="基本语法规则" tabindex="-1">基本语法规则 <a class="header-anchor" href="#基本语法规则" aria-label="Permalink to &quot;基本语法规则&quot;">​</a></h2><ol><li><p>所有函数、表达式都要包含在括号内，左括号“ ( ”与右括号“ ) ”一定要成对出现，括号内部的字符串的双引号“ &quot; ”与“ &quot; ”也要成对出现。</p></li><li><p>表达式格式：(函数名 运算符 运算符 运算符)</p></li></ol><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>整形（INT）即整数，整数由数字和正负号组成，正号可省略。</li><li>实型（REAL） 带小数点的数。（注：-1~1 之间的小数中的 0 不可以省略）</li><li>字符串（STR） 字符串的最大长度为 100，空字符串可以用&quot;&quot;表示。</li><li>列表（LIST） 用括号将多个数据合并为一个数据的数据类型。</li><li>函数（SUBS） 函数相当于子程序或过程。可分为内部函数和外部函数。</li><li>文件描述符（FILE） 类似于文件指针，是 AutoLISP 赋于被打开文件的标识号。</li><li>图元名（ENAME） AutoCAD 为图形对象指定的 16 进制的数字标识。</li><li>选择集（PICKSET） 一个或多个图形对象命名的集合。</li><li>VLA 对象 VLA 对象是 ActiveX 应用程序的主要组成部分。</li></ul><h2 id="函数的定义" tabindex="-1">函数的定义 <a class="header-anchor" href="#函数的定义" aria-label="Permalink to &quot;函数的定义&quot;">​</a></h2><ul><li>defun：定义函数关键字，用于定义用户命令。</li><li>setq：AutoLisp 中的赋值函数，相当于 &quot;=&quot;，具体用法符合语法规则 2 (setq 表达式 1 表达式 2) ;; 将表达式 2 的值赋给表达式 1</li><li>+：数学库函数。求两个数的和。 (+ 表达式 1 表达式 2) ;; 计算表达式 1 与表达式 2 的和</li></ul><div class="language-lisp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lisp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">defun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">setq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #iNum1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">setq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #iNum2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">setq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #iNumSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #iNum1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #iNum2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 求和</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在命令中输入<code>(Add)</code>执行</p><h2 id="编辑器" tabindex="-1">编辑器 <a class="header-anchor" href="#编辑器" aria-label="Permalink to &quot;编辑器&quot;">​</a></h2><p>百度搜索“飞诗编辑器”下载即可</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="直接加载" tabindex="-1">直接加载 <a class="header-anchor" href="#直接加载" aria-label="Permalink to &quot;直接加载&quot;">​</a></h3><p>可以将代码直接粘贴至 CAD 命令行加载，再输入 defun 后面命名的名称调用</p><h3 id="文件加载" tabindex="-1">文件加载 <a class="header-anchor" href="#文件加载" aria-label="Permalink to &quot;文件加载&quot;">​</a></h3><ol><li>输入命令 AppLoad 会弹出文件对话框，编写的 lisp 代码是.lsp 的文件，选择进行加载</li><li>之后选择我们前一步生成的lsp文件，点击加载，这时可能会弹出提示 未签名的可执行文件，直接点击始终加载或加载一次，之后我们会看见命令行出现：已成功加载 xxx.lsp。</li></ol>`,19),h=[e];function p(n,o,k,d,r,u){return s(),a("div",null,h)}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
